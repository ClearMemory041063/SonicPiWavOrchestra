# playwavtune2.txt
# take playwavnotes.txt and adds
# read a tune from a .csv file
# plat the tune

require 'csv'
songfile="c:/home/songs/ode2joyoct.csv"
#read the csv file into an array of hashes
tune = Array.new
CSV.foreach(songfile, { encoding: "UTF-8", headers: true, header_converters: :symbol, converters: :all}) do |row|
  tune << row.to_hash
end
puts tune
tune=tune.ring #convert to a ring datastructure

# you will need to download the wav files from
# http://virtualplaying.com
# unzip and copy selected files to a folder defined by
# the samps variable below

# use samps to point ot the folder where the wav files
# are located
samps = "c:/home/pi/samples/"
# setup several wav files using the #
# so you can live loop by deleting or adding the hashtags
samps1=samps+"trumpets-sus-e4.wav"
#samps1=samps+"tuba-sus-e2-PB-loop.wav"
#samps1=samps+"cello-c4.wav"
#samps1=samps+"violin-e4.wav"
#samps1=samps+"tuba-sus-e2.wav"
samps1=samps+"oboe-e4-pb-loop.wav"
#samps1="C:/home/piano/4_54.wav"
#samps1="C:/home/piano/5_60.wav"
#samps1="C:/home/piano/Piano.mf.C4 (1).aiff"


# The hash data structure that translates a pitch
# to the rate value needed by the sample command
rates = {C:0.793708097,
         CS:0.840882201,
         DB:0.840882201,
         D:0.890877651,
         DS:0.943876468,
         EB:0.943876468,
         E:1,
         F:1.059460607,
         FS:1.122440312,
         GB:1.122440312,
         G:1.189212147,
         GS:1.259897461,
         AB:1.259897461,
         A:1.334829961,
         AS:1.414191669,
         BB:1.414191669,
         B:1.498285957,
         R:0.001
         }

# define  the get octave multiplier function
def getoctave (a)
  b=0.0
  if(a>0.0)
    b=2.0**a
  else
    b= 1.0/2.0**-a
  end
  return b
end

# use st value to control the tempo
st=2.0 #slow tempo
#st=1.0 #medium tempo
#st=0.5 #fast tempo

# one way to play wave files
define :playwavnote do |sampsn,octv,pitch,time,shift=1.0|
  sample samps1,
    rate:rates[pitch.upcase.intern]*getoctave(octv)*shift,
    attack: 0.1,
    sustain: st*time.to_f*0.5,
    release: st*time.to_f*2.0/3.0
  #,pan: -0.8
  sleep st*time.to_f
end

# set up a live loop to play the song
live_loop :bar1 do
  puts look
  note=tune.tick
  unless note==nil
    #puts note
    puts note[:tone].intern
    # add up note times
    barcnt=barcnt+note[:time]
    #test for a measure (barcount)
    if(barcnt==1)
      barcnt=0
      barcount += 1
      puts "barcount= ",barcount
    end
    playwavnote samps1,note[:octave]-4.0,note[:tone],
      note[:time]
    # play note[:tone].intern
    # the .intern converts a string to a symbol
    #  sleep note[:time]*tempo
  else #end of song seen
    #tick_reset #causes it to play again
    sleep 0.1
  end
end

oshift=0.25
# set up a 2nd live loop to play the song
live_loop :bar2 do
  sync :bar1
  #if(barcount>1)
  puts look
  note=tune.tick
  unless note==nil
    playwavnote samps1,
      note[:octave]-4.0,note[:tone],
      note[:time],oshift
  else #end of song seen
    #tick_reset #causes it to play again
    sleep 0.1
  end
  #end
end






